---
title: "Final Project: Article"
subtitle: Data Analytics and Visualization, Fall 2024
author: Otis Golden and Simone Johnson
institute: Harvey Mudd College
date: December 9th 2024
geometry: margin=0.5in
format: 
  html:
    self-contained: true
    code-fold: true
---

# US Criminal Justice System - FBI UCR Program

The topic that we chose to study in this report was the US criminal justice system, particulatly the reported distribution of arrests across the United States. In particular, we looked at how the arrest rate for possession of marijuana varied for  different reported races as well as the overall crime distribution per state. These topics are important because they shine light on significant social issues in the justice system and display that there may be racial disparities in the US incarcaration rates. We can furthmore see if those race disparities have further confirmation at the state level.

The arrest data is from the Federal Bureau of Investigation's (FBI) Uniform Crime Reporting (UCR) Program in 2021, which allows police agencies to report their arrest information every month. This form contains information on the number of arrests for each offense and demographic information from that agency. This dataset, thus, will give us the demographic information that we need to be able to analyze if there are any disparities or trends amongst the groups.

Additionally, the population data comes from the  U.S. Census Bureau and contains breakdowns by state of the total population and the population by similar race categories to that of the UCR reporting.

```{python}

from lets_plot import *
import geopandas as gpd
from lets_plot.geo_data import *
import numpy as np
import pandas as pd

LetsPlot.setup_html()

import warnings
warnings.filterwarnings("ignore")

```


```{python}

data = pd.read_csv("38795-0001-Data.tsv", sep='\t')
demodata = data[data["AREO"]==1]


```


## Marijuana Possession

Racial biases in the US criminal justice system have been documented over the last several decades, and one area that these biases are particularly present are in cannabis possession arrests, often referred to as part of "the War on Drugs". In this section, we wanted to present the FBI's compiled marijuana possession arrest data for the different races included in their breakdown ("White", "Black", "Asian", and "American Indian/ Native American"). 


```{python}

demodataWeed = demodata[(demodata["OFFENSE"] == 182) | (demodata["OFFENSE"] == 187)]

state_pop = pd.read_csv("popstate.csv")

state_pop["STNAME"] = [x[:6] for x in state_pop['Description']]

state_pop2019 = state_pop[state_pop["Year"] == 2019]

count_demographics_state = demodataWeed.groupby("STNAME", as_index=False)["OFFENSE"].count()

p1 = count_demographics_state

for x in ["AA", "AB", "AW", "AI", "JA", "JB", "JW", "JI"]:
  subset = demodataWeed[demodataWeed[x] < 20]
  p2 = subset.groupby("STNAME", as_index=False)[x].sum()
  p1 = pd.merge(p1, p2, on="STNAME", how="left")


observDataCountsWeed = pd.merge(p1, state_pop2019, on="STNAME", how="left")

observDataCountsWeed["state"] = observDataCountsWeed["STNAME"]

observDataCountsWeed.to_csv("observDataCountsWeed.csv")

# print(observDataCountsWeed["AB"].sum()/observDataCountsWeed["Black Alone"].sum()*100000)
# print(observDataCountsWeed["AW"].sum()/observDataCountsWeed["White Alone"].sum()*100000)

```

Below is an interactive side-by-side map of arrests per 100,000 people of the selected demographic. This allows you to see a direct comparison of the rate of arrest between the different reported races.

```{ojs}

viewof demographic1 = Inputs.select(
  new Map([
    ["White", "AW"],
    ["Asian", "AA"],
    ["Black", "AB"],
    [" American Indian / Native American", "AI"]
  ]),
  { label: "Demographic 1" }
)

viewof demographic2 = Inputs.select(
  new Map([
    ["Black", "AB"],
    ["Asian", "AA"],
    ["White", "AW"],
    [" American Indian / Native American", "AI"]
  ]),
  { label: "Demographic 2" }
)

```


<div style="display: flex">${plot1()} ${plot2()}</div>



```{ojs}

function plot1(){
return addTooltips( // Add tooltips
  Plot.plot({
    projection: "albers-usa",
    width: width/2,
    marks: [
      Plot.geo(states, {
        fill: (d) => DemographicCountMap1.get(d.properties.name),
        title: (d) =>
          `${d.properties.name} \n ${
            DemographicCountMap1.get(d.properties.name) // Custom tooltip text
          }`
      })
    ],
    color: {
      scheme: "Blues",
      unknown: "#ddd",
      type: "linear",
      label: "Arrests per 100,000 individuals", // Update legend label
      legend: true,
      percent: false, // Convert value to a percent (from a proportion)
      domain: [0, 1000] // Update the value domain to span 0 to 100% access
    }
  })
)}


function plot2(){
return addTooltips( // Add tooltips
  Plot.plot({
    projection: "albers-usa",
    width: width/2,
    marks: [
      Plot.geo(states, {
        fill: (d) => DemographicCountMap2.get(d.properties.name),
        title: (d) =>
          `${d.properties.name} \n ${
            DemographicCountMap2.get(d.properties.name) // Custom tooltip text
          }`
      })
    ],
    color: {
      scheme: "Blues",
      unknown: "#ddd",
      type: "linear",
      label: "Arrests per 100,000 individuals", // Update legend label
      legend: true,
      percent: false, // Convert value to a percent (from a proportion)
      domain: [0, 1000] // Update the value domain to span 0 to 100% access
    }
  })
)}

DemographicCountMap1 = new Map(demographicCounts.map(({Description, ...rest}) => [Description, rest[demographic1]/rest[simpleMap.get(demographic1)]*100000]))
DemographicCountMap2 = new Map(demographicCounts.map(({Description, ...rest}) => [Description, rest[demographic2]/rest[simpleMap.get(demographic2)]*100000]))
simpleMap = new Map([
    ["AA", "Asian Alone"],
    ["AB", "Black Alone"],
    ["AW", "White Alone"],
    ["AI", "American Indian or Alaskan Native"]
  ])
```

```{ojs}

import {addTooltips} from "@mkfreeman/plot-tooltip"
import {us} from "@observablehq/us-geographic-data"
states = topojson.feature(us, us.objects.states)
demographicCounts = FileAttachment("observDataCountsWeed.csv").csv()

```


When looking at this, we see that there is a clear disparity in arrest rates amoung the different races -- particularly between Black people and white people. In some states, Black individuals are arrested for marijuana possession at a rate almost 10 times higher than white individuals, such as in Utah, Idaho, and Wyoming. Additionally, if we look at the US as a whole, the rate of Black individuals arrested for marijuana possession is 151.1 people arrested per 100,000 individuals, where as for white individuals it is only 35.1 people arrested per 100,000 individuals. This supports the claim from before that there is a racial disparity in the arrest rates because the data is normalized to each demographic's population with each state, showing arrests per 100,000 individuals within each group.

This is an important issue because marijuana possession arrests can have life changing impacts such as causing difficulty finding jobs, losing public health care, or even eviction from public housing. Thus, because there is this disparity in the arrest rates, Black communities face these consequences at a higher rate.

We can see when comparing marijuana possession arrest rates for Black individuals to white individuals that the highest disparities are in states that haven't legalized or decriminalized marijuana. However, another insight we can gain from this is that there is still a disparity present even in states that have legalized and decriminalized marijuana, indicating that in order to fix the racial disparities in arrest rates for marijuana possession, more than just legalization is required.

## Crime Type Distribution by State

Certain types of crime seem to have had a massive uptick in frequency across the United States. Specifically, it seems that the news reports a lot about rampant drug abuse and DUI charges, especially in the state of Washington. Therefore in this section of the report, we wanted to look at the most common arrest offense per state, as well as to determine if there is a correlation between the most common arrest offense and race.


```{python}
import pandas as pd
import numpy as np
from lets_plot import*
LetsPlot.setup_html() 
import matplotlib.pyplot as plt
```

```{python}
state_crime = data[['STATE','OFFENSE']]
state_crime['OFFENSE'] = pd.to_numeric(state_crime['OFFENSE'])
state_crime['State'] = state_crime["STATE"].astype(str)

offense_code_to_name = {
    11:"Murder and Non-Negligent Manslaughter",
    12:"Manslaughter by Negligence",
    20:"Forcible Rape",
    30:"Robbery",
    40:"Aggravated Assault",
    50:"Burglary - Breaking or Entering",
    60:"Larceny - Theft (except motor vehicle)",
    70:"Motor Vehicle Theft",
    80:"Other Assaults",
    90:"Arson",
    100:"Forgery and Counterfeiting",
    110:"Fraud",
    120:"Embezzlement",
    130:"Stolen property Buying, Receiving, Poss.",
    140:"Vandalism",
    150:"Weapons - Carrying, Possessing, etc.",
    160:"Prostitution and Commercialized Vice Total",
    161:"Prostitution and Commercialized Vice - Prostitution",
    162:"Prostitution and Commercialized Vice - Assisting or Promoting Prostitution",
    163:"Prostitution and Commercialized Vice - Purchasing Prostitution	",
    170:"Sex Offenses (except forcible rape and prostitution)",
    18:"Drug Abuse Violations (Total)",
    180:"Sale/Manufacturing (Subtotal)",
    181:"Opium and Cocaine, and their derivatives (Morphine, Heroin)",
    182:"Marijuana",
    183:"Synthetic Narcotics - Manufactured Narcotics which can cause true drug addiction (Demerol, Methadones)	",
    184:"Other Dangerous Non-Narcotic Drugs (Barbiturates, Benzedrine)",
    185:"Possession (Subtotal)",
    186:"Opium and Cocaine, and their derivatives (Morphine, Heroin)",
    187:"Marijuana",
    188:"Synthetic Narcotics - Manufactured Narcotics which can cause true drug addiction (Demerol, Methadones)	",
    189:"Other Dangerous Non-Narcotic Drugs (Barbiturates, Benzedrine)",
    19:"Gambling (Total)",
    191:"Bookmaking (Horse and Sport Book)",
    192:"Number and Lottery",
    193:"All Other Gambling",
    200:"Offenses Against Family and Children",
    210:"Driving Under the Influence",
    220:"Liquor Laws",
    230:"Drunkenness",
    240:"Disorderly Conduct",
    250:"Vagrancy",
    260:"All Other Offenses (except traffic)",
    270:"Suspicion",
    280:"Curfew and Loitering Law Violations",
    290:"Runaways",
    301:"Human Trafficking - Commercial Sex Acts (300)",
    302:"Human Trafficking - Involuntary Servitude (310)",
    998: "N/A"
}

us_state_to_abbrev = {
    "Alabama": "AL",
    "Alaska": "AK",
    "Arizona": "AZ",
    "Arkansas": "AR",
    "California": "CA",
    "Colorado": "CO",
    "Connecticut": "CT",
    "Delaware": "DE",
    "Florida": "FL",
    "Georgia": "GA",
    "Hawaii": "HI",
    "Idaho": "ID",
    "Illinois": "IL",
    "Indiana": "IN",
    "Iowa": "IA",
    "Kansas": "KS",
    "Kentucky": "KY",
    "Louisiana": "LA",
    "Maine": "ME",
    "Maryland": "MD",
    "Massachusetts": "MA",
    "Michigan": "MI",
    "Minnesota": "MN",
    "Mississippi": "MS",
    "Missouri": "MO",
    "Montana": "MT",
    "Nebraska": "NE",
    "Nevada": "NV",
    "New Hampshire": "NH",
    "New Jersey": "NJ",
    "New Mexico": "NM",
    "New York": "NY",
    "North Carolina": "NC",
    "North Dakota": "ND",
    "Ohio": "OH",
    "Oklahoma": "OK",
    "Oregon": "OR",
    "Pennsylvania": "PA",
    "Rhode Island": "RI",
    "South Carolina": "SC",
    "South Dakota": "SD",
    "Tennessee": "TN",
    "Texas": "TX",
    "Utah": "UT",
    "Vermont": "VT",
    "Virginia": "VA",
    "Washington": "WA",
    "West Virginia": "WV",
    "Wisconsin": "WI",
    "Wyoming": "WY",
    "District of Columbia": "DC",
    "American Samoa": "AS",
    "Guam": "GU",
    "Northern Mariana Islands": "MP",
    "Puerto Rico": "PR",
    "United States Minor Outlying Islands": "UM",
    "Virgin Islands, U.S.": "VI",
    "Federal":"FD"
}

us_num_to_abbrev = {
    1: "AL",
    50: "AK",
    2: "AZ",
    3: "AR",
    4: "CA",
    5: "CO",
    6: "CT",
    7: "DE",
    9: "FL",
    10: "GA",
    51: "HI",
    11: "ID",
    12: "IL",
    13: "IN",
    14: "IA",
    15: "KS",
    16: "KY",
    17: "LA",
    18: "ME",
    19: "MD",
    20: "MA",
    21: "MI",
    22: "MN",
    23: "MS",
    24: "MO",
    25: "MT",
    26: "NE",
    27: "NV",
    28: "NH",
    29: "NJ",
    30: "NM",
    31: "NY",
    32: "NC",
    33: "ND",
    34: "OH",
    35: "OK",
    36: "OR",
    37: "PA",
    38: "RI",
    39: "SC",
    40: "SD",
    41: "TN",
    42: "TX",
    43: "UT",
    44: "VT",
    45: "VA",
    46: "WA",
    47: "WV",
    48: "WI",
    49: "WY",
    8: "DC",
    55: "AS",
    98: "GU"
}

crimeTypePerState = state_crime.groupby(['STATE','OFFENSE']).size().sort_values(ascending = False).reset_index(name = 'max')
crimeTypePerState = crimeTypePerState[crimeTypePerState["OFFENSE"] != 260]
maxcrimeperstate = crimeTypePerState.groupby('STATE')['max'].idxmax().reset_index(name = "max")
crimeTypePerState = crimeTypePerState.loc[maxcrimeperstate['max']]

def codetoname(code):
    return offense_code_to_name[code]

def numtoabbr(state):
  try:
    return  us_num_to_abbrev[state]
  except:
    print(str(state)) 

def statetoabbr(state):
  try:
    return  us_state_to_abbrev[state]
  except:
    print(str(state)) 


crimeTypePerState['OFFENSE'] = crimeTypePerState['OFFENSE'].apply(codetoname)
crimeTypePerState['STATE'] = crimeTypePerState["STATE"].apply(numtoabbr)

crimeTypePerState.drop(crimeTypePerState.tail().index,inplace=True)

def get_label_rotation(angle, offset):
    # Rotation must be specified in degrees :(
    rotation = np.rad2deg(angle + offset)
    if angle <= np.pi:
        alignment = "right"
        rotation = rotation + 180
    else: 
        alignment = "left"
    return rotation, alignment

def add_labels(angles, values, labels, offset, ax):
    
    # This is the space between the end of the bar and the label
    padding = 4
    
    # Iterate over angles, values, and labels, to add all of them.
    for angle, value, label, in zip(angles, values, labels):
        angle = angle
        
        # Obtain text rotation and alignment
        rotation, alignment = get_label_rotation(angle, offset)

        # And finally add the text
        ax.text(
            x=angle, 
            y=value + padding, 
            s=label, 
            ha=alignment, 
            va="center", 
            rotation=rotation, 
            rotation_mode="anchor"
        ) 

crimeTypePerState = (
    crimeTypePerState
    .groupby(["OFFENSE"])
    .apply(lambda x: x.sort_values(["max"], ascending = False))
    .reset_index(drop=True)
)

VALUES = crimeTypePerState["max"].values 
LABELS = crimeTypePerState["STATE"].values
GROUP = crimeTypePerState["OFFENSE"].values

PAD = 3
ANGLES_N = len(VALUES) + PAD * len(np.unique(GROUP))

ANGLES = np.linspace(0, 2 * np.pi, num=ANGLES_N, endpoint=False)
WIDTH = (2 * np.pi) / len(ANGLES)

GROUPS_SIZE = [len(i[1]) for i in crimeTypePerState.groupby("OFFENSE")]

OFFSET = np.pi / 2

offset = 0
IDXS = []
for size in GROUPS_SIZE:
    IDXS += list(range(offset + PAD, offset + size + PAD))
    offset += size + PAD

fig, ax = plt.subplots(figsize=(20, 10), subplot_kw={"projection": "polar"})

ax.set_theta_offset(OFFSET)
ax.set_ylim(-6000, 8000)
ax.set_frame_on(False)
ax.xaxis.grid(False)
ax.yaxis.grid(False)
ax.set_xticks([])
ax.set_yticks([])

GROUPS_SIZE = [len(i[1]) for i in crimeTypePerState.groupby("OFFENSE")]
COLORS = [f"C{i}" for i, size in enumerate(GROUPS_SIZE) for _ in range(size)]

# Add bars to represent ...
ax.bar(
    ANGLES[IDXS], VALUES, width=WIDTH, color=COLORS, 
    edgecolor="white", linewidth=2
)
add_labels(ANGLES[IDXS], VALUES, LABELS, OFFSET, ax)

offset = 0
for group, size in zip(list(crimeTypePerState["OFFENSE"].unique()), GROUPS_SIZE):
    # Add line below bars
    x1 = np.linspace(ANGLES[offset + PAD], ANGLES[offset + size + PAD - 1], num=50)
    ax.plot(x1, [-5] * 50, color="#333333")
    
    # Add text to indicate group
    ax.text(
        np.mean(x1), 5000, group, color="#333333", fontsize=8, 
        fontweight="bold", ha="center", va="center"
    )
    
    
    offset += size + PAD
```

This visual confirms some of the hypotheses that we had about DUI and drug abuse offenses in the US being common, as we can see that the major categories of offenses are DUI, Assault, Drug Abuse, and Disorderly Conduct. Additionally, there is an interesting outlier here in both Wisconsin where it is the only state with the most common offense being disorderly conduct. One side remark about this visualization is that some of the states that have less data have multiple crime offenses that have similar counts, for example Washington DC has similar counts of disorderly conduct, vandalism, and assault. We believe that this is because of the smaller population in DC and the smaller number of arrests, but this is an area that could be further investigated in the future. 

Furthermore, we want to look at race distributions and the crime that they are arrested for. If there is a strong correlation between race and a certain type of crime, this may indicate some institutional bias.


```{python}
pop_ethnicity = pd.read_csv('raw_data.csv')
pop_ethnicity = pop_ethnicity.drop(pop_ethnicity.index[0])
pop_ethnicity = pop_ethnicity.iloc[:, :8]
pop_ethnicity.rename(columns={"Location": "STATE"}, inplace= True)
pop_ethnicity = pop_ethnicity[pop_ethnicity['STATE'].isin(us_state_to_abbrev.keys())]
pop_ethnicity["STATE"] = pop_ethnicity["STATE"].apply(statetoabbr)

crim_ethno = crimeTypePerState.merge(pop_ethnicity,on='STATE', how = 'left')
crim_ethno.fillna(0, inplace=True)

offense_race = crim_ethno.groupby(['OFFENSE'])[['White', 'Black','Hispanic','Asian','American Indian or Alaska Native','Native Hawaiian or Pacific Islander','Multiple Races']].sum()
offense_race = offense_race/offense_race.sum()
offense_race.reset_index(inplace=True)
offense_race = offense_race.melt(id_vars=['OFFENSE'], value_vars=['White', 'Black','Hispanic','Asian','American Indian or Alaska Native','Native Hawaiian or Pacific Islander','Multiple Races'], var_name='Race/Ethnicity', value_name='Percent')
offense_race

ggplot(offense_race) + geom_pie(aes(slice='Percent', fill='OFFENSE'), stat='identity', size=5)+facet_grid(x ='Race/Ethnicity', x_labwidth=10) + ggsize(1400,300) + theme(legend_key_size=0.5)
```

Looking at this chart, we are able to see more evidence of a potential racial bias in drug arrests as Drug Abuse accounts for 53.8% of Black arrests based on the most arrested offenses per state, which we can see is higher than for any other racial group. But there are more interesting trends that we can see in this chart, like how DUI comprises 49% of Indigenous arrests. Overall, what this set of charts displays is that there is a visual difference in the proportions of offenses that each race is arrested for.

Based on these pie charts, we wondered if you can use race as an identifier for the type of crime arrested. Thus, we tried using a decision tree classifier on this data, which is a learning algorithm that is used for predictive modeling. The output below shows how well this classifier is able to predict the offense type based on the race of a given arrest.

```{python}
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, classification_report
from sklearn import tree

X = crim_ethno.drop(['OFFENSE','STATE'], axis=1) 
y = crim_ethno['OFFENSE']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier()

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
accuracy

tree.plot_tree(clf)

print(classification_report(y_test, y_pred))

scores = cross_val_score(clf, X, y, cv=5, scoring='f1_macro')
print("Cross-validation F1 scores:", scores)
```

In one of the runs of a decision tree classifier to classify offenses based on a percentage of the races arrested for those crimes, my model had an accuracy of 0.6, and interestingly the precision for the drug abuse violations was 0.67 which would imply some bias in terms of who is getting arrested for drug-related crimes.

## Conclusion

Through all of our visualizations and analysis, we have shown that there is a correlation between race and the offence for which an individual is arrested for. This indicates that there may be a systematic or institutional bias for these offenses, especially drug-related crimes. In specific, we found that there is a visual difference in the most common offenses when separated by race and that there may be some bias in the populations that are getting arrested for drug-related crimes through using a decision tree classifier. Finally, we looked specifically at marijuana possession charges and found that there is a clear disparity in arrest rates amoung the different races and that this disparity persists even in states that have legalized marijuana. We think that more analysis could be done in the future with this dataset, particularly investigating deeper into specific charges related to drug abuse across racial groups over time. In particular, we think that a visualization and analysis that included a time aspect could be interesting for marijuana possession charges could be interesting because it would allow us to see the impact of when each state legalizes marijuana.